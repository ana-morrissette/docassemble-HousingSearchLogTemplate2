---
include:
  - docassemble.AssemblyLine:assembly_line.yml
---
metadata:
  title: |
    Create a Housing Search Log
  short title: |
    My Housing Search Log
  authors:
    - Ana Morrissette
---
mandatory: True
comment: |
  Global interview metadata
variable name: interview_metadata["housing_search_log_template"]
data:
  al_weaver_version: "1.7.0"
  generated on: "2022-10-17"
  title: >-
    Create a Housing Search Log
  short title: >-
    My Housing Search Log
  description: |-
    Housing search log template, to be filled out to keep track of housing search.
  original_form: >-
    None
  allowed courts: []
  categories: []
  typical role: "na"
  generate download screen: True
---
code: |
  interview_metadata['main_interview_key'] =  'housing_search_log_template'
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name =  'docassemble-HousingSearchLogTemplate'
---
code: |
  interview_short_title = "Get a Housing search log template"
---
code: |
  al_form_type = "other" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - prop: DAObject
  - prop.address: ALAddress
---
sections:
  - review_housing_search_log_template: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_housing_search_log_template
code: |
  # Set the allowed courts for this interview
  allowed_courts = interview_metadata["housing_search_log_template"]["allowed courts"]
  nav.set_section("review_housing_search_log_template")
  user_role = "na"
  user_budget
  contact_q
  users.gather()
  interview_order_housing_search_log_template = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  housing_search_log_template_intro
  interview_order_housing_search_log_template
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  housing_search_log_template_download
---
comment: |
  This question is used to introduce your interview. Please customize
id: Create_a_Housing_Search_Log
continue button field: housing_search_log_template_intro
question: |
  Create a Housing Search Log
subquestion: |
  This is a tool to aid in keeping track of rental properties you reach out to, visit, for the purpose of keeping a record for housing voucher requirements. 
  
  This form can be returned to everytime you want to add another rental property to the form.
---
objects:
  - person: ALIndividual
---
id: person's name
sets:
  - users[0].name.first
  - users[0].name.last
question: |
  What is your name?
fields:
  - code: |
      users[0].name_fields(show_suffix=False)
---
id: Voucher Information
question: |
  Voucher Information
fields:
  - "Voucher Amount": user_budget
    datatype: currency
    min: 0
  - "Voucher Issue Date": voucher_date
    datatype: date
  - "Bedroom size": bedroom_size
    input type: dropdown
    choices:
      - Studio
      - 1
      - 2
      - 3
      - 4
      - 5
---
id: Property Information
question: |
  Property Information
fields:
  - "Property Address": prop.address.address
  - "Link for online property posting": prop_link
  - "I contacted the Property Listing": contact_q
    datatype: yesno
  - "Date of Contact": contact_date
    datatype: date
  - "I visited the Property": visit_q
    datatype: yesno
  - "Date of Visit": visit_date
    datatype: date
  - "I applied to rent the Property": apply_q
    datatype: yesno
  - "Date of Application": apply_date
    datatype: date
  - "Notes about property": user_notes
  - "What is the status of renting this property?": prop_status
---
id: is there an opposing party?
question: |
  % if al_form_type in ['starts_case','existing_case','appeal'] and user_started_case:
  Is there a **defendant** or respondent in this case? 
  % elif al_form_type in ['starts_case','existing_case','appeal']:
  Is there a **plaintiff** or petitioner in this case?
  % else:
  Do you have contact information for this property listing?
  % endif
subquestion: |
  % if al_form_type in ['starts_case','existing_case','appeal'] and user_started_case:
  Answer yes if there is a person or organization you are suing or taking to court.
  % elif al_form_type in ['starts_case','existing_case','appeal']:
  You should be able to find out from the paperwork that told you to 
  go to court.

  Answer yes if someone else has sued you or is bringing you to court.
  % endif
fields:
  - no label: other_parties.there_are_any
    datatype: yesnoradio
---
id: preview housing_search_log_template
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_recipient_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_housing_search_log_template'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: housing_search_log_template_preview_question    
---
code: |
  signature_fields = []
---
id: housing search log template review screen
event: review_housing_search_log_template
question: |
  Review your answers
review:
  - Edit: user_budget
    button: |
      **Voucher Budget**:
      ${ currency(user_budget) }
  - Edit: users.revisit
    button: |
      **Users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: voucher_date
    button: |
      **Voucher Issue Date**:
      ${ voucher_date }
  - Edit: apply_q
    button: |
      **Did you apply to rent the property?**:
      ${ word(yesno(apply_q)) }
  - Edit: bedroom_size
    button: |
      **Bedroom size**:
      ${ bedroom_size }
  - Edit: contact_q
    button: |
      **Did you contact the property listing?**:
      ${ word(yesno(contact_q)) }
  - Edit: visit_q
    button: |
      **Did you visit the property?**:
      ${ word(yesno(visit_q)) }
  - Edit: prop_status
    button: |
      **What is the status of renting this property?**:
      ${ prop_status }
  - Edit: apply_date
    button: |
      **Date of Application**:
      ${ apply_date }
  - Edit: contact_date
    button: |
      **Date of Contact**:
      ${ contact_date }
  - Edit: visit_date
    button: |
      **Date of Visit**:
      ${ visit_date }
  - Edit: prop_link
    button: |
      **Link for online property posting**:
      ${ prop_link }
  - Edit: prop.address.address
    button: |
      **Property Address**:
      ${ prop.address.address.block() }
  - Edit: user_notes
    button: |
      **Notes about property**:
      ${ user_notes }
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
id: download housing_search_log_template
event: housing_search_log_template_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_housing_search_log_template'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=True) }

progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  #- housing_search_log_template_Post_interview_instructions: ALDocument.using(title="Instructions", filename="housing_search_log_template_next_steps.docx", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - housing_search_log_template_attachment: ALDocument.using(title="Create a Housing Search Log", filename="housing_search_log_template", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[ housing_search_log_template_attachment], filename="housing_search_log_template", title="All forms to download for your records", enabled=True)
  - al_recipient_bundle: ALDocumentBundle.using(elements=[housing_search_log_template_attachment],  filename="housing_search_log_template", title="All forms to file", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachments:
  #  - name: Post-interview-Instructions
  # filename: housing_search_log_template_next_steps
  # docx template file: housing_search_log_template_next_steps.docx
  # variable name: housing_search_log_template_Post_interview_instructions[i]
  - name: housing search log template
    filename: housing_search_log_template
    variable name: housing_search_log_template_attachment[i]
    skip undefined: True
    docx template file: housing_search_log_template.docx


